[
	{
	  "name": "Эмодзи на неделю",
	  "description": "Кастомная реакция под вашими сообщениями.",
	  "reply": "Вы активировали кастомную реакцию. Изменить её - <#985451560496689182> (РЕДАКТИРОВАТЬ)",
	  "eval": "bot.database.donate.upsert({where:{memberId:message.author.id},update:{emoji:{upsert:{update:{end:{increment:6048e5}},set:{end:Date.now()+6048e5,id:message.guild.emojis.cache.random().id}}}},create:{memberId:message.author.id,emoji:{end:Date.now()+6048e5,id:message.guild.emojis.cache.random().id}}});",
	  "price": 100000
	},
	{
	  "name": "Роль на неделю",
	  "description": "Кастомная роль на сервере.",
	  "eval": "(async()=>{let a=message.member.cache?.donate?.role?.id;return a||(a=await message.guild.roles.create({name:message.author.username,position:message.guild.roles.cache.get(`804398233564086322`).position+1,color:Math.floor(16777216*Math.random()),hoist:!0}).then(a=>a.id),await message.member.roles.add(a)),bot.database.donate.upsert({where:{memberId:message.author.id},update:{role:{upsert:{update:{end:{increment:6048e5}},set:{end:Date.now()+6048e5,id:a}}}},create:{memberId:message.author.id,role:{end:Date.now()+6048e5,id:a}}})})();",
	  "reply": "Вы активировали кастомную роль. Изменить её - <#985451560496689182> (РЕДАКТИРОВАТЬ)",
	  "price": 250000
	}, 
	{
	  "name": "Классический кейс",
	  "description": "Классический кейс",
	  "eval": "const cases = require('.//cases.json'); const config = require('.//config.json'); (async () => { const msg = await message.channel.send({ content: 'Открываю **классический кейс**..', allowedMentions: { parse: ['users'] } }); setTimeout(() => { msg.edit({ content: `Вам выпало: ${open('default')}`, allowedMentions: { parse: ['users'] } }) }, 8500); }); const other = { 'don-role': '<@&996860041284042814> на неделю', 'week-role': '<@&999272843063857263> на неделю', 'month-role': '<@&999272843063857263> на месяц', }; function open(box) { if (!cases[box]) return console.error('Неверный тип кейса'); const boxes = Object.values(cases[box]).sort((a, b) => a - b).map((value) => Object.keys(cases[box]).find((k) => cases[box][k] == value)); for (let i = 0; i < (Object.keys(cases[box]).length); i++) { const perc = cases[box][boxes[i]]; if (random(1, 100) <= perc) { let prize = boxes[i]; if (!isNaN(prize)) prize = `${config.symbol}${prize}`; else prize = other[prize]; return prize; } else continue; }; }; function random(min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; };",
	  "reply": "Вы приобрели классический кейс. Открыть - !!use Классический кейс",
	  "price": 1000
	}
]  
